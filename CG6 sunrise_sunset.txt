#include <GL/glut.h>
#include <cmath>

float sunY = -1.0f, sunSpeed = 0.001f; bool isRising = true;

void drawSun() {
    glColor3f(1, 1, 0);
    glBegin(GL_TRIANGLE_FAN);
    glVertex2f(0, sunY);
    for (int i = 0; i <= 100; ++i) {
        float angle = i * 2 * M_PI / 100;
        glVertex2f(0.1f * cos(angle), sunY + 0.1f * sin(angle));
    }
    glEnd();
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glBegin(GL_QUADS);
    glColor3f(isRising ? 0.2f : 1.0f, isRising ? 0.5f : 0.4f, isRising ? 1.0f : 0.0f);
    glVertex2f(-1, 1); glVertex2f(1, 1); glColor3f(0, 0, 0); glVertex2f(1, -1); glVertex2f(-1, -1);
    glEnd();
    drawSun();
    glutSwapBuffers();
}

void update(int) {
    sunY += isRising ? sunSpeed : -sunSpeed;
    if (sunY >= 1 || sunY <= -1) isRising = !isRising;
    glutPostRedisplay(); glutTimerFunc(16, update, 0);
}

void init() {
    glClearColor(0, 0, 0, 1); glMatrixMode(GL_PROJECTION); glLoadIdentity(); gluOrtho2D(-1, 1, -1, 1);
}

int main(int argc, char** argv) {
    glutInit(&argc, argv); glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(800, 600); glutCreateWindow("Sunrise and Sunset");
    init(); glutDisplayFunc(display); glutTimerFunc(16, update, 0); glutMainLoop();
    return 0;
}
